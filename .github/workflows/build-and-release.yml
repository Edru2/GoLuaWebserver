name: Build and Release

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            suffix: so
            cc: gcc
          - os: macos-latest
            goos: darwin
            goarch: amd64
            suffix: dylib
            cc: clang
          - os: windows-latest
            goos: windows
            goarch: amd64
            suffix: dll
            cc: x86_64-w64-mingw32-gcc
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'
      - name: Install dependencies (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: sudo apt-get update && sudo apt-get install -y gcc mingw-w64
      - name: Build
        run: |
          export CC=${{ matrix.cc }}
          export TARGET=goLuaWebserver.${{ matrix.suffix }}
          export GO_BUILD_MODE=-buildmode=c-shared
          make
          zip -r "${{ matrix.os }}-${{ matrix.goarch }}.zip" ./goLuaWebserver.* ./libluaWebserver.so 
        shell: bash
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.goarch }}
          path: ./*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Prepare for Release
        id: prep
        run: |
          echo "RELEASE_FILES=$(ls artifacts/*.zip | xargs -n 1 basename)" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/${{ env.RELEASE_FILES }}
          asset_name: ${{ env.RELEASE_FILES }}
          asset_content_type: application/zip
